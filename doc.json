{
  "dev_note": "Session 20250612_1600: Added CosmoDSL directories and plugin architecture.",
  "projectName": "Copernican Suite",
  "projectVersion": "1.4g",
  "lastUpdated": "2025-06-13",
  "description": "This document serves as the master technical specification for the Copernican Suite. It defines the required structure for all components and provides the authoritative style guide for all generated outputs. The current priority is to resolve the critical data loading failure in data_loaders.py by correctly implementing the logic from the stable v1.3 release.",
  "developmentHistory": {
    "v1.3": "Stable version with robust and correct data loaders for all specified formats. Its data handling serves as a reference.",
    "v1.4b": "Major output stage refactor. Introduced a bug that prevents BAO model lines from being plotted.",
    "v1.4rc_pre-fix": "Unstable. An attempt to fix the BAO plot and overhaul logging introduced a fatal `KeyError` and a `ValueError`.",
    "v1.4rc_post-pipeline-fix": "The initial pipeline and logging errors were fixed, but this exposed a fatal `TypeError` in the engine due to string-based math.",
    "v1.4rc_data-type-fix": "The engine's `TypeError` was fixed, but this revealed a `KeyError` in the engine due to a column name mismatch from the data loader.",
    "v1.4rc_column-name-fix": "The column name `KeyError` was fixed, but this revealed a deeper issue: the data loader was only loading 33 of 740 SNe due to incorrect handling of missing data placeholders ('---').",
    "v1.4rc13_current": "The root cause of the SNe data loss was confirmed as incorrect column selection. Development refocused on reproducing the v1.3 logic.",
    "v1.4g_current": "UniStra parsers now use the stable v1.3 fixed-width method, restoring all data. The engine has been repaired with `cosmo_engine_1.4g.py`."
    "v1.4g_cosmodsl": "Introduced CosmoDSL and plugin-based engine folder."
  },
  "projectSchema": {
    "copernican.py": "Main orchestrator script. Manages user interaction and high-level workflow control.",
    "input_aggregator.py": "The 'Assembler'. Gathers all user inputs and serializes them into a standardized 'Job JSON'.",
    "cosmo_engine_*.py": "The 'Black Box' computational engine. Accepts a 'Job JSON', performs all fitting, and returns a 'Results JSON'.",
    "output_manager.py": "The 'Dispatcher'. Orchestrates the output stage by delegating tasks to specialist modules (`plotter.py`, `csv_writer.py`).",
    "plotter.py": "The 'Plotting Specialist'. Contains all Matplotlib code. Generates plots according to the `plottingStyleGuide`.",
    "csv_writer.py": "The 'CSV Specialist'. Contains all pandas code for writing tabular data output.",
    "data_loaders.py": {
      "description": "Contains all functions for parsing various data file formats.",
      "parsing_standard": "The logic for parsing UniStra-type files (e.g., tablef3.dat) MUST replicate the robust method from the v1.3 codebase. This includes: 1) Targeting the correct columns for redshift and distance modulus. 2) Using the `na_values` parameter in pandas to handle placeholders like '---' at read-time. 3) Implementing a fallback from `z_cmb` to `z_hel` to maximize data retention."
    }
  },
  "plottingStyleGuide": {
    "base_style": "seaborn-v0_8-colorblind",
    "figure_facecolor": "#f0f0f0",
    "axes_facecolor": "#ffffff",
    "grid_color": "#cccccc",
    "title_fontsize": 16,
    "label_fontsize": 12,
    "tick_fontsize": 10,
    "legend_fontsize": 10,
    "footer_fontsize": 8,
    "info_box_fontsize": 9,
    "hubble_plot": {
      "title": "Hubble Diagram",
      "xlabel": "Redshift (z)",
      "ylabel": "Distance Modulus (μ)",
      "data_points": {
        "color": "#333333",
        "marker": "o",
        "s": 20,
        "alpha": 0.6,
        "ecolor": "#555555",
        "elinewidth": 1,
        "capsize": 2
      },
      "model_lines": {
        "lcdm": {
          "color": "#D55E00",
          "linestyle": "-",
          "linewidth": 2.5
        },
        "alt_model": {
          "color": "#0072B2",
          "linestyle": "--",
          "linewidth": 2.5
        }
      },
      "residuals": {
        "ylabel": "Δμ (Model - Data)",
        "hline_color": "#000000",
        "hline_style": ":",
        "hline_width": 1
      },
      "info_boxes": {
        "positioning": "Placed inside the main plot area, typically 'upper left' and 'lower right'.",
        "lcdm_style": "{'boxstyle':'round,pad=0.5', 'fc':'#FFEEEE', 'ec':'darkred', 'alpha':0.9}",
        "alt_model_style": "{'boxstyle':'round,pad=0.5', 'fc':'#EEF2FF', 'ec':'darkblue', 'alpha':0.9}"
      }
    },
    "bao_plot": {
      "title": "Baryon Acoustic Oscillations",
      "xlabel": "Redshift (z)",
      "ylabel_template": "BAO Observable ({observable_name})",
      "data_points": {
        "marker": "D",
        "s": 40,
        "alpha": 0.8,
        "elinewidth": 1.5,
        "capsize": 3,
        "colors": "A list of distinct, vibrant colors (e.g., ['#009E73', '#F0E442', '#56B4E9']) corresponding to the sorted observable types."
      },
      "model_lines": {
        "lcdm": {
          "linestyle": "A solid line style, specifically '-' or (0, ()).",
          "colors": "A list of three distinct shades of red (e.g., ['#8B0000', '#FF0000', '#FA8072']) corresponding to the sorted observable types."
        },
        "alt_model": {
          "linestyle": "A prominent dash-gap style, specifically (0, (8, 5)).",
          "colors": "A list of three distinct shades of blue (e.g., ['#00008B', '#0000FF', '#4169E1']) corresponding to the sorted observable types."
        }
      },
      "info_boxes": {
        "positioning": "Placed outside the plot area on the right, controlled by fig.text.",
        "lcdm_style": "{'boxstyle':'round,pad=0.5', 'fc':'#FFEEEE', 'ec':'darkred', 'alpha':0.9}",
        "alt_model_style": "{'boxstyle':'round,pad=0.5', 'fc':'#EEF2FF', 'ec':'darkblue', 'alpha':0.9}",
        "content": "Must contain: Model Name, Mathematical Form (from JSON), Cosmological Parameters, and BAO Test Results (r_s and Chi-Squared)."
      }
    }
  },
  "developmentProtocol": {
    "aiDevelopmentGuidelines": {
      "description": "To ensure clarity, maintainability, and smooth transitions between development sessions, a strict commenting and documentation standard MUST be followed by any modifying AI.",
      "rules": [
        "Add a 'DEV NOTE' at the top of any modified file summarizing changes for the current version.",
        "Comment code extensively. Explain the why behind your code, not just the what. Run python -m py_compile data_loaders.py plotter.py and python -m py_compile *.py before committing.",
        "Update the main README.md and this doc.json file to reflect the latest changes, architectural decisions, and future plans.",
        "Avoid merge conflict markers (the sequences Git inserts during merges) in comments or docs. See AGENTS.md for full guidelines."
      ]
    }
  }
}

