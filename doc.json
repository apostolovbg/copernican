{
  "projectName": "Copernican Suite",
  "version": "1.0.0 (Stable Release)",
  "lastUpdated": "2025-06-08",
  "description": "A Python-based framework designed for the modular testing and comparison of cosmological models against observational datasets like Supernovae Ia (SNe Ia) and Baryon Acoustic Oscillations (BAO). This version features a stable, sequential workflow with enhanced diagnostics, improved plotting capabilities, and a clean output directory structure.",
  "goals": [
    "To provide a robust and extensible platform for fitting cosmological models to observational data.",
    "To compare the performance of alternative cosmological models against the standard LambdaCDM model using consistent statistical measures.",
    "To ensure consistent parameter handling when testing a given model across different datasets.",
    "To support a variety of data formats through a versatile and modular data loading system.",
    "To allow easy integration of new cosmological models via a standardized plugin architecture."
  ],
  "architecture": {
    "overview": "The Copernican Suite is designed with a primary project directory containing all core scripts and model plugins. All outputs (logs, plots, CSVs) are saved into a dedicated 'output' subdirectory to maintain a clean workspace.",
    "coreModules": [
      {
        "name": "copernican.py",
        "role": "The main orchestrator script. It handles user interaction, loads models dynamically, manages the workflow, and directs all file outputs to a dedicated 'output/' subdirectory."
      },
      {
        "name": "data_loaders.py",
        "role": "Manages the loading and initial parsing of various observational datasets."
      },
      {
        "name": "cosmo_engine.py",
        "role": "Contains the core physics and statistical logic, including chi-squared functions, the SNe parameter fitting algorithm, and diagnostic logging."
      },
      {
        "name": "output_manager.py",
        "role": "Handles all forms of output, including logging, generating comparative plots with enhanced visuals (larger fonts, binned residual averages), and saving results to CSV files."
      },
      {
        "name": "Model Plugins (*_model.py)",
        "role": "Individual Python files defining specific cosmological models."
      }
    ],
    "launchers": [
      {
        "name": "start.command",
        "platform": "macOS / Linux",
        "description": "A double-clickable shell script for macOS and Linux users. It automatically navigates to the script's directory and executes 'copernican.py' using the python3 interpreter. It must be made executable once (chmod +x start.command)."
      },
      {
        "name": "run.bat",
        "platform": "Windows",
        "description": "A double-clickable batch file for Windows users. It opens a Command Prompt, navigates to the script's directory, and runs 'copernican.py', pausing at the end to allow the user to see the output."
      }
    ]
  },
  "workflowOverview": [
    "**1. Initialization & Configuration:** `copernican.py` starts, creates an 'output/' directory, and sets up logging.",
    "**2. User Input:** The user is prompted to specify the alternative model plugin, SNe Ia data file, and BAO data file.",
    "**3. SNe Ia Fitting:** For both LambdaCDM and the alternative model, `cosmo_engine.fit_sne_parameters` is called to find the best-fit cosmological parameters.",
    "**4. BAO Analysis (Post-SNe Fit):** For each model, the fitted parameters from the SNe stage are used to calculate the model's BAO predictions and chi-squared.",
    "**5. Output Generation:** `output_manager.py` saves all plots and summary CSVs into the 'output/' subdirectory."
  ],
  "futureExpansionGuidelines": {
    "enhancingFittingEngine": "The `fit_sne_parameters` function in `cosmo_engine.py` could be refactored to support other backends like MCMC samplers (e.g., `emcee`, `dynesty`).",
    "GPU-Accelerated Fork (Future Goal)": "The current framework is CPU-based. A key future direction is to create a new branch of the suite that leverages GPU acceleration (e.g., via OpenCL or CUDA). This would be a major architectural redesign, requiring the replacement of CPU-bound `scipy` functions (like `quad` and `brentq`) with custom, parallel-aware functions written in a GPU-compatible framework (e.g., PyTorch, JAX, or Numba) to significantly speed up the computationally intensive fitting process."
  },
  "keyDesignPrinciplesSummary": [
    "**Modularity:** Core functionalities are separated into distinct modules.",
    "**Extensibility:** The architecture is designed to easily incorporate new models, data parsers, and observational tests.",
    "**Consistency:** Ensures cosmological parameters from one probe are used to test against others.",
    "**Robustness & Diagnostics:** Includes enhanced logging, robust error handling, and isolated plotting environments.",
    "**Cleanliness:** All outputs are organized into a dedicated subdirectory."
  ]
}