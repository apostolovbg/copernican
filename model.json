{
  "interfaceName": "Copernican Suite Model Plugin",
  "version": "1.1",
  "description": "This document specifies the standard interface for creating a cosmological model plugin compatible with the Copernican Suite. A model plugin is a single Python file that defines a cosmological model's parameters, equations, and observable calculations.",
  "fileConvention": {
    "naming": "Use a descriptive, Python-module-friendly name ending in '.py'.",
    "location": "The model plugin file must reside in the same directory as the core suite scripts."
  },
  "requiredModuleComponents": {
    "metadataBlock": {
      "description": "A set of global variables that define the model's identity, parameters, and display information.",
      "attributes": [
        {
          "name": "MODEL_NAME",
          "type": "str"
        },
        {
          "name": "PARAMETER_NAMES",
          "type": "list of str"
        },
        {
          "name": "INITIAL_GUESSES",
          "type": "list of float"
        },
        {
          "name": "PARAMETER_BOUNDS",
          "type": "list of tuples"
        },
        {
          "name": "MODEL_EQUATIONS_LATEX_SN / _BAO",
          "type": "list of str",
          "purpose": "LaTeX strings representing key model equations for display in plot summaries."
        }
      ]
    },
    "functionsBlock": {
      "description": "A set of functions that calculate cosmological observables, accepting `*cosmo_params` as arguments.",
      "functions": [
        "distance_modulus_model(z_array, *cosmo_params)",
        "get_luminosity_distance_Mpc(z_array, *cosmo_params)",
        "get_comoving_distance_Mpc(z_array, *cosmo_params)",
        "get_Hz_per_Mpc(z_array, *cosmo_params)",
        "get_sound_horizon_rs_Mpc(*cosmo_params)"
      ]
    }
  },
  "implementationNotes": {
    "numericalStability": "All functions must be robust, handle array inputs, and return `np.nan` or `np.inf` on failure, as the engine is designed to handle these invalid results without crashing.",
    "optimization": "Functions called repeatedly by the fitter should be optimized. For complex models, calculate results only for unique redshift values and map them back to the original array.",
    "latexCompatibility": "When defining `MODEL_EQUATIONS_LATEX`, ensure all LaTeX commands are compatible with Matplotlib's `mathtext` renderer. For example, use `\\left. ... \\right|` for evaluation bars instead of `\\bigg|`, which can cause a crash.",
    "units": "The suite's engine expects outputs in standard cosmological units (Mpc for distances, km/s/Mpc for H(z))."
  }
}